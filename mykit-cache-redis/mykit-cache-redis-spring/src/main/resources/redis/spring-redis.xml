<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">


    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="cacheManager" key-generator="cacheKeyGenerator"/>


    <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath*:properties/redis.properties" system-properties-mode="FALLBACK"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.cluster.max.total}" />
        <property name="maxIdle" value="${redis.cluster.max.idle}" />
        <property name="minIdle" value="${redis.cluster.min.idle}" />
        <property name="blockWhenExhausted" value="${redis.cluster.blockWhenExhausted}"/>
        <property name="maxWaitMillis" value="${redis.cluster.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.cluster.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.cluster.testOnReturn}" />
        <property name="testWhileIdle" value="${redis.cluster.testWhileIdle}" />
        <property name="minEvictableIdleTimeMillis" value="${redis.cluster.minEvictableIdleTimeMillis}" />
        <property name="timeBetweenEvictionRunsMillis" value="${redis.cluster.timeBetweenEvictionRunsMillis}" />
        <property name="numTestsPerEvictionRun" value="${redis.cluster.numTestsPerEvictionRun}" />
    </bean>

    <!--配置文件加载-->
    <bean id="resourcePropertySource" class="org.springframework.core.io.support.ResourcePropertySource">
        <constructor-arg name="name" value="redis.properties"/>
        <constructor-arg name="resource" value="classpath:properties/redis.properties"/>
    </bean>

    <!--redisCluster配置-->
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="propertySource" ref="resourcePropertySource"/>
    </bean>

    <!-- redis服务器中心 -->
    <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <property name="password" value="${redis.cluster.password}" />
        <property name="timeout" value="${redis.cluster.timeout}" ></property>
    </bean >

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="connectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="io.mykit.cache.redis.spring.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="io.mykit.cache.redis.spring.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean >

   <!-- <bean id="keyGenerator" class="org.springframework.cache.interceptor.SimpleKeyGenerator"/>-->

    <!--配置CacheTime类-->
    <bean id="cacheTime" class="io.mykit.cache.redis.spring.cache.CacheTime">
        <constructor-arg index="0" value="${redis.cluster.expirationSecondTime}"/>
        <constructor-arg index="1" value="${redis.cluster.preloadSecondTime}"/>
    </bean>

    <!--配置的默认Key生成策略-->
    <bean id="cacheKeyGenerator" class="io.mykit.cache.redis.spring.cache.CacheKeyGenerator"/>

    <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
    <bean id="cacheManager" class="io.mykit.cache.redis.spring.cache.CustomizedRedisCacheManager">
        <constructor-arg index="0" ref="redisTemplate"/>
        <property name="defaultExpiration" value="${redis.cluster.redisDefaultExpiration}"/>
        <property name="usePrefix" value="${redis.cluster.usePrefix}"/>
        <property name="cacheTimes">
            <map>
                <entry key="${redis.cluster.defaultExpirationKey}" value-ref="cacheTime"/>
            </map>
        </property>
    </bean>

</beans>